"use strict";

var __db__ = require('__driver/db'),
	__async__ = require('__driver/myasync').async,
	__notifications__ = require("__driver/notifications"),
	__cache__ = require("__driver/cache");

module.exports = {
	exec: function (parms) {
		var document = parms.data;
		var idresource = require("mongodb").ObjectID(parms.url_data[0]);
		__db__.delete({
			collection : "survey_section",
			condition : {
				id_survey : idresource
			}, callback : function(err1, res1){
				__db__.delete({
					collection : "survey_section_field",
					condition : {
						id_survey : idresource
					},
					callback : function(err2, res2){
						__db__.find({
							collection : "survey",
							condition : {
								_id : idresource
							},
							callback : function(errerr, intermedio){
								var original = intermedio[0];
								__db__.update({
									collection : "survey",
									set : document,
									condition : {
										_id : idresource
									},
									callback : function(x, y){
										if(x){
											parms.response.writeHead(400, {"Content-Type": "application/json"});
											parms.response.end("{}");
										}else{
											var n1;
											try{
												n1 = document["sections"].length;
											}catch(e){
												n1 = 0;
											}
											var n2;
											var sections = Array();
											var fields;
											var pos1 = 0, pos2;

											//calckbacks hell recursive+cyclic, fuck!
											function create_survey_section(){
											//if i have not created all the survey_section entries
												if(pos1 < n1){
													//i set the survey id of the actual section
													document["sections"][pos1]["id_survey"] = idresource;
													//i insert the survey_section entry
													__db__.insert({
														collection : "survey_section",
														document : document["sections"][pos1],
														callback : function(err, sec){
															if(!err){
																//if the insertion of survey_section was successful, i start to insert the survey_section_field entries
																//those fields are of the actual section
																function create_survey_section_field(){
																	//if there is something field else
																	if(pos2 < n2){
																		document["sections"][pos1]["fields"][pos2]["id_survey_section"] = sec.ops[0]._id;
																		document["sections"][pos1]["fields"][pos2]["id_survey"] = idresource;
																		//i insert the field
																		__db__.insert({
																			collection : "survey_section_field",
																			document : document["sections"][pos1]["fields"][pos2],
																			callback : function(err, field){
																				if(!err){
																					//if theere was no any error, i insert the next field
																					pos2++;
																					fields.push(field.ops[0]);
																				}
																				//call to create the next field of the actual section
																				create_survey_section_field();
																			}
																		});
																	}else{
																		//i've finished to insert all the fields
																		//in consequence, i've finished a section_survey and section_survey_field entries of the actual section
																		document["sections"][pos1]["fields"] = fields;
																		sections.push(document["sections"][pos1++]);
																		//call to create the next section
																		create_survey_section();
																	}
																}

																pos2 = 0;
																try{
																	n2 = document["sections"][pos1].fields.length;
																}catch(e){
																	n2=0;
																}
																fields = Array();
																//call the function that create survey_section_field_entries
																create_survey_section_field();
															}else
																create_survey_section();
														}
													});
												//i've created all the survey_section entries, even their fields, now i can send my http response
												}else{
													//send to the client through json the sections and fields with the id's of survey_section and survey_section_field entries
													document["sections"] = sections;
													if(document.start){
														if(original.start){
															__cache__.set({
																category : {
																	name : "survey",
																	category : {
																		name : "not-started"
																	}
																},
																key : original._id,
																data : {
																	start : new Date(document.start),
																	_id : original._id
																}
															});
														}else{
															__cache__.add({
																category : {
																	name : "survey",
																	category : {
																		name : "not-started"
																	}
																},
																data : [
																	{
																		key : (original._id),
																		data : {
																			start : new Date(document.start),
																			_id : original._id
																		}
																	}
																]
															});
														}
													}else{
														__cache__.del({
															category : {
																name : "survey",
																category : {
																	name : "not-started"
																}
															},
															key : original._id
														});
													}
													parms.response.writeHead(200, {"Content-Type": "application/json"});
													parms.response.end(JSON.stringify({
													}));
												}
											}

											//call the function that create survey_section entries
											create_survey_section();
										}
									}
								});	
							}
						})
					}
				});
			}
		})
	}
}