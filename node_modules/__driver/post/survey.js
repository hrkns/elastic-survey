"use strict";

var __db__ = require('__driver/db'),
	__async__ = require('__driver/myasync').async,
	__notifications__ = require("__driver/notifications"),
	__cache__ = require("__driver/cache"),
	__surveyActivation__ = require("__driver/post/survey/activation.js"),
	__surveyClosing__ = require("__driver/post/survey/closing.js");

module.exports = {
	exec: function (parms) {
		if(parms.url_data.indexOf("activation") != -1){
			__surveyActivation__.exec(parms);
		}else if(parms.url_data.indexOf("closing") != -1){
			__surveyClosing__.exec(parms);
		}else{
			//if data is valid
			if(true){
				parms.data.hash = String(Math.random()).substr(2);
				parms.data.url_name = parms.data.hash,
				parms.data.iduser = parms.request.session.iduser;
				parms.data.status = "not-started";
				//create survey
				__db__.insert({
					collection : "survey",
					document : parms.data,
					callback : function(x, y){
						var n1;
						try{
							n1 = y.ops[0]["sections"].length;
						}catch(e){
							n1 = 0;
						}
						var n2;
						var sections = Array();
						var fields;
						var pos1 = 0, pos2;

						//calckbacks hell recursive+cyclic, fuck!
						function create_survey_section(){
							//if i have not created all the survey_section entries
							if(pos1 < n1){
								//i set the survey id of the actual section
								y.ops[0]["sections"][pos1]["id_survey"] = y.ops[0]._id;
								//i insert the survey_section entry
								__db__.insert({
									collection : "survey_section",
									document : y.ops[0]["sections"][pos1],
									callback : function(err, sec){
										if(!err){
											//if the insertion of survey_section was successful, i start to insert the survey_section_field entries
											//those fields are of the actual section
											function create_survey_section_field(){
												//if there is something field else
												if(pos2 < n2){
													//i set the idsurvey and idsection of the actual field
													y.ops[0]["sections"][pos1]["fields"][pos2]["id_survey_section"] = sec.ops[0]._id;
													y.ops[0]["sections"][pos1]["fields"][pos2]["id_survey"] = y.ops[0]._id;
													//i insert the field
													__db__.insert({
														collection : "survey_section_field",
														document : y.ops[0]["sections"][pos1]["fields"][pos2],
														callback : function(err, field){
															if(!err){
																//if theere was no any error, i insert the next field
																pos2++;
																fields.push(field.ops[0]);
															}
															//call to create the next field of the actual section
															create_survey_section_field();
														}
													});
												}else{
													//i've finished to insert all the fields
													//in consequence, i've finished a section_survey and section_survey_field entries of the actual section
													y.ops[0]["sections"][pos1]["fields"] = fields;
													sections.push(y.ops[0]["sections"][pos1++]);
													//call to create the next section
													create_survey_section();
												}
											}

											pos2 = 0;
											try{
												n2 = y.ops[0]["sections"][pos1].fields.length;
											}catch(e){
												n2 = 0;
											}
											fields = Array();
											//call the function that create survey_section_field_entries
											create_survey_section_field();
										}else
											create_survey_section();
									}
								});
							//i've created all the survey_section entries, even their fields, now i can send my http response
							}else{
								//send to the client through json the sections and fields with the id's of survey_section and survey_section_field entries
								y.ops[0]["sections"] = sections;
								if(y.ops[0].start)
									__cache__.add({
										category : {
											name : "survey",
											category : {
												name : "not-started"
											}
										},
										data : [
											{
												key : (y.ops[0]._id),
												data : {
													start : new Date(y.ops[0].start),
													_id : y.ops[0]._id
												}
											}
										]
									});
								parms.response.writeHead(201, {"Content-Type": "application/json"});
								parms.response.end(JSON.stringify({
									item : (y.ops[0])
								}));
							}
						}

						//call the function that create survey_section entries
						create_survey_section();
					}
				});
			}
		}
	}
}